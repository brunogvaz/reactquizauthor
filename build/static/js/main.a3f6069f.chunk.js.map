{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Hero","react_default","a","createElement","className","class","Book","_ref","title","Turn","_ref2","author","books","style","backgroundColor","src","imageUrl","alt","map","key","Continue","Footer","id","href","App","_ref3","turnData","Fragment","Boolean","window","location","hostname","match","state","authors","allBooks","reduce","p","c","i","concat","fourRandomBooks","shuffle","slice","answer","sample","find","some","getTurnData","name","imageSource","imageAttribution","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3f6069f.chunk.js","sourcesContent":["import React from \"react\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nfunction Hero() {\n  return (\n    <div className=\"row\">\n      <div className=\"jumbotron col-10 offset-1\">\n        <div className=\"container\">\n          <h1> Author Quiz</h1>\n          <p class=\"lead\">\n            This is a modified jumbotron that occupies the entire horizontal\n            space of its parent.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\nfunction Book({title}){\n  return ( <div className=\"answer\" >\n  <h4>{title}</h4></div>  );\n}\nfunction Turn({author, books}) {\n  return (\n    <div className=\"row turn\" style={{ backgroundColor: \"gray\" }}>\n      <div className=\"col-4 offset-1\">\n        <img src={author.imageUrl} className=\"authorimage\" alt=\"Author\" />\n      </div>\n      <div className=\"col-6\">\n        {books.map((title) => \n          <Book title={title} key = {title}/>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction Continue() {\n  return <div />;\n}\n\nfunction Footer() {\n  return (\n    <div id=\"footer\" className=\"row\">\n      <div className=\"col-12\">\n        <p className=\"text-muted credit\">\n          All images are from <a href=\"http://g1.globo.com/\">G1 </a> and are in\n          the public domain\n        </p>\n      </div>\n    </div>\n  );\n}\n\nfunction App({ turnData }) {\n  return (\n    <>\n      <div className=\"container-fluid\">\n        <Hero />\n        <Turn {...turnData} />\n        <Continue />\n        <Footer />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {shuffle,sample} from 'underscore';\nconst authors = [\n  {\n      name: 'Mark Twain',\n      imageUrl: 'images/authors/marktwain.jpg',\n      imageSource: 'Wikimedia Commons',\n      books: ['The Adventures of Huckleberry Finn']\n    },\n    {\n      name: 'Joseph Conrad',\n      imageUrl: 'images/authors/josephconrad.png',\n      imageSource: 'Wikimedia Commons',\n      books: ['Heart of Darkness']\n    },\n    {\n      name: 'J.K. Rowling',\n      imageUrl: 'images/authors/jkrowling.jpg',\n      imageSource: 'Wikimedia Commons',\n      imageAttribution: 'Daniel Ogren',\n      books: ['Harry Potter and the Sorcerers Stone']\n    },\n    {\n      name: 'Stephen King',\n      imageUrl: 'images/authors/stephenking.jpg',\n      imageSource: 'Wikimedia Commons',\n      imageAttribution: 'Pinguino',\n      books: ['The Shining', 'IT']\n    },\n    {\n      name: 'Charles Dickens',\n      imageUrl: 'images/authors/charlesdickens.jpg',\n      imageSource: 'Wikimedia Commons',\n      books: ['David Copperfield', 'A Tale of Two Cities']\n    },\n    {\n      name: 'William Shakespeare',\n      imageUrl: 'images/authors/williamshakespeare.jpg',\n      imageSource: 'Wikimedia Commons',\n      books: ['Hamlet', 'Macbeth', 'Romeo and Juliet']\n    }\n];\n\nfunction getTurnData(authors){\n  const allBooks = authors.reduce(function (p,c,i){return p.concat(c.books);},[]);\nconst fourRandomBooks = shuffle(allBooks).slice(0,4);\n\nconst answer = sample(fourRandomBooks);\n\nreturn {author:authors.find((a)=> a.books.some((title)=>title == answer)),books:fourRandomBooks};\n}\n\nconst state = { turnData: getTurnData(authors) };\n\nReactDOM.render(<App {...state}/>, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}